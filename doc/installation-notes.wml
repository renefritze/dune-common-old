# -*- html -*-
# $Id$

#use wml::layout::default title="DUNE - Installation Notes"

<h1>Installation Notes</h1>

<h2>Grids with Dune support</h2>
<p>
The following external grids support the DUNE Grid interface:
<p>
<table>
<tbody>
<tr><td>ALBERTA</td><td>1.2</td><td><a href="http://www.alberta-fem.de/">http://www.alberta-fem.de/</a></td></tr>
<tr><td>ALUGrid</td><td>0.3</td><td><a href="http://www.mathematik.uni-freiburg.de/IAM/Research/alugrid/">http://www.mathematik.uni-freiburg.de/IAM/Research/alugrid/</a></td></tr>
<tr><td>UG (non-free licence)</td><td></td><td><a href="http://sit.iwr.uni-heidelberg.de/~ug/">http://sit.iwr.uni-heidelberg.de/~ug/</a></td></tr>
</tbody>
</table>
<p>
Within the DUNE source tree OneDGrid, SGrid and YaspGrid are
available.
</p>

<h2>External Packages needed by the Grids</h2>

<h3>ALBERTA Grid</h3>
<p>
The following packages are mandatory to compile ALBERTA:
</p>
<dl>
<dt>Fortran 77</dt><dd>compiler, e.&nbsp;g. g77</dd>
<dt>OpenGL</dt><dd>  A free implementation is available from
        <a href="http://www.mesa3d.org/">http://www.mesa3d.org/</a></dd>
<dt>BLAS</dt><dd><p>&quot;Basic Linear Algebra Subprograms&quot;</p>
<p>
        This often comes as a package with Linux (for Debian sarge it
        is called atlas3 and has to be installed together with the
        header package atlas3-headers).
</p><p>
	If it does not come with your distribution you can get it from
	http://math-atlas.sourceforge.net
</p></dd>
</dl>
<p>
For optional packages see the README file of ALBERTA
</p>

<h3>ALUGrid</h3>
<p>
There are no mandatory packages for ALUGrid.
</p><p>
For optional packages see the README file of ALUGRID.
</p>
<h3>UGGrid</h3>
<p>
There are no mandatory packages for UGGrid.
</p>
<p>
You can (but you don't have to) create UGGrid objects from AmiraMesh files.
For this you'll need the <a href="http://www.amiravis.com">AmiraMesh</a> library.
It should be free, however, it is not
available for download. You'll have to inquire via email.
</p>

<h2>Compilation and Installation of the External Grids</h2>

<h3>ALBERTA</h3>
<ol>
<li>Download at least version 1.2 of ALBERTA from the ALBERTA homepage
  <a href="http://www.alberta-fem.de">http://www.alberta-fem.de</a> </li>

<li><p>Unpack it in a directory</p>
	   <kbd>tar xzf alberta-1.2.tar.gz</kbd>
    <p>and move to that directory</p>
	<kbd>cd alberta-1.2</kbd>
</li>
<li><p>Configure ALBERTA, e. g.</p>
    <kbd>   ./configure --prefix=/directory/to/install/alberta/to \\
       --with-blas-name=blas-3 --disable-shared \\
       CXX=g++-3.4 CC=gcc-3.4
</kbd>
<p>
    With --prefix the absolute path of the directory we install to has
    to given, --with-blas-name we tell configure the name of our BLAS
    library.
</p><p>
    IMPORTANT!! Always use the --disable-shared option as shared
    linking is broken in version 1.2!!
</p><p>
    With the variable CC and CXX we tell configure the C and C++
    compiler and linker to use. These have to be the same compilers
    and linkers you will use to compile DUNE!!
</p>
   <p> For more information and additional options see</p>
    <kbd>./configure --help</kbd>
</li>

<li><p>Compile ALBERTA with</p> <kbd>make</kbd></li>

<li> <p>Install ALBERTA with</p> <kbd>make install</kbd></li>
</ol>

<h3>ALUGrid</h3>
<ol>
<li>Download at least version 0.3 of ALUGrid from the <a href="http://www.mathematik.uni-freiburg.de/IAM/Research/alugrid/">ALUGrid homepage</a>.</li>
<li><p>Unpack it in a directory</p>
	   <kbd>tar xzf ALUGrid-0.3.tar.gz</kbd>
    <p>and move to that directory</p>
<kbd>
	cd ALUGrid-0.3
</kbd></li>

<li><p>Configure ALUGrid, e. g.</p>
<kbd>
       ./configure --prefix=/directory/to/install/ALUGrid/to \\
       CXX=g++-3.4 CC=gcc-3.4
</kbd>
<p>for the sequential use of ALUGrid.</p>
<p>
    With --prefix the absolute path of the directory we install to has
    to be given.
</p>
<p>
    With the variable CC and CXX we tell configure the C and C++
    compiler and linker to use. These have to be the same compilers
    and linkers you will use to compile DUNE!!
</p>
<p>
    If you want to use the parallel version of ALUGrid one has to
    proceed as follows. As the compiler used to compile your mpi
    version might differ from the version needed for DUNE instead of
    specify mpi as the compiler we provide the include path and linker
    path of MPI.
</p>
<p>
    In order to retrieve the CPPFLAGS and LDFLAGS necessary for MPI,
    dune-common offers a script <i>dune-common/bin/mpi-config</i>:
</p>
<kbd>
       Usage: mpi-config [OPTIONS] [LIBRARIES]
       Options:
        [--mpicc[=COMPILER]]
        [--disable-cxx]
        [--verbose]
        [--version]
        [--mpiversion]
        [--libs]
        [--cflags]
</kbd>
<p>
     mpi-config calls the MPI compiler and tries to extract the
	 parameters. One can specify which MPI compiler to use, by setting
	 the $MPICC environment variable or by supplying the
	 --mpicc=<i>MPICOMPILER</i> option.
</p>
<p>
     Using mpi-config one can pass the approriate CPPFLAGS and LDFLAGS
     to configure. We suppose that dune-common/bin is in your path
     (for bash you can do this with: export PATH=$PATH:/path/to/dune/modules/dune-common/bin.
</p>
<p>
     E. g. for the MPI compiler <i>/opt/foo-mpi/bin/mpicc</i> (for the
     default MPI compiler just skip the --mpicc=/opt/foo-mpi/bin/mpicc
     options):
</p>
<kbd>
       ./configure --prefix=/directory/to/install/ALUGrid/to \\
       CXX=g++-3.4 CC=gcc-3.4 \\
       CPPFLAGS="`mpi-config --cflags --disable-cxx --mpicc=/opt/foo-mpi/bin/mpicc`" \\
       LDFLAGS="`mpi-config --libs --disable-cxx --mpicc=/opt/foo-mpi/bin/mpicc`"
</kbd>
<p>
    For further information and additional options see
    </p><kbd>./configure --help</kbd>
</li>
<li><p>Compile ALUGrid with</p> <kbd>make</kbd></li>
<li><p>Install ALUGrid with</p> <kbd>make install</kbd></li>
</ol>
<h3>UGGrid</h3>

<ol>
<li><p>Get and Install AmiraMesh</p>
<p>
Once you have the tarball type
</p><pre>
tar xvf libamiramesh.tar
cd libamiramesh/src
make
</pre>
to install it.
</li>
<li>
<p>
Get the UG library. You can obtain it at
<a href="http://cox.iwr.uni-heidelberg.de/~ug">http://cox.iwr.uni-heidelberg.de/~ug</a>. 
Unfortunately, the version of UG available for download there (3.8 at the
time of writing) is not new enough to be compatible with DUNE. Please
write to one of the contact addresses given on the page
and ask for a more recent version of UG.
</p>
<li>Unpack the tarball and move into the ug source tree.
    <pre>
tar zxvf UG-3.9.1.tar.gz
cd UG-3.9.1
    </pre>
</li>
<li><p>Build the UG Make System</p>
<kbd>
    ./configure --prefix=my_favourite_ug_installation_path \\
   --enable-dune CXX=g++-3.4 CC=g++-3.4
</kbd>
<p>
   With --prefix the absolute path of the directory we install to has
    to be given.
</p><p>
    With --enable-dune we enable special features needed by Dune.
</p><p>
    With the variable CC and CXX we tell configure the C and C++
    compiler and linker to use. Don't forget that the compiler has to
    be binary-compatible with the one you're using for Dune.
</p><p>
    <b>Note:</b> Even CC has to be set to the C++ and not
    the C compiler !!!
</p></li>
<li>
        <p>Compile UG with</p>
        <kbd> make</kbd>
</li>
<li><p>Install UG with</p> <kbd>make install</kbd></li>
</ol>

<h2>Installation of DUNE modules</h2>
<ol>
<li><p>Download DUNE modules</p>
<p>
    See <a
    href="http://dune-project.org/download.html">Download
    Section</a>
    section for more details.
</p>
<p>
When using the unstable version via svn, you might be interested in
the <a href="http://dune-project.org/svn.html">DUNE SVN Developer
Info</a> section.
</p>
</li>
<li> <p>Building all DUNE modules</p>
<p>
 Check out all dune modules into same directory (say dune-home)
</p>
<p>
 Run dunecontrol script available in the base module dune-common/bin. This will run autogen.sh, configure and make for each module.
</p>
<kbd>./dune-common/bin/dunecontrol all</kbd>
<p>
 Read the <a
 href="http://dune-project.org/doc/buildsystem/buildsystem.pdf">DUNE
 Build System Howto</a> section for more details.
</p>
</li>
<li> <p>Building a specific DUNE module (and its dependent modules)</p>
<p> Run dunecontrol script
<kbd>./dune-common/bin/dunecontrol --module=module_name all</kbd>
where module_name is the name of that particular module given in the dune.module file
</p>
<p> Read <a href="http://dune-project.org/dunemodule.html">Maintaining new Dune modules and applications</a> section for more details.
</p>
</li>
<li> <p>Building using certain configure options</p>
<p> Run dunecontrol script
<kbd>./dune-common/bin/dunecontrol --opts=/path_to/file.opts --module=module_name all</kbd>
where file.opts is the name of the file with configure options
specified (you can find an <a href="example.opts">example.opts</a>
file in the dune-common/doc directory)
</p>

<p>Read <a href="http://dune-project.org/dunemodule.html">Maintaining new Dune modules and applications</a> section for more details.
</p>
<p> <a
href="http://dune-project.org/doc/buildsystem/buildsystem.pdf">DUNE
Build System Howto</a> will also give you an excellent introduction to
the build system and how to create new modules/projects your own.
</p>
</li>
</ol>
<h2>Creating your own DUNE project module</h2>
<p>
You can create your own dune project module by using the duneproject script available in dune-common/bin directory.
Running the script will create a directory with supporting files (configure.ac ,Makefile.am etc.) and a sample .cc file.
After creating the module you can build this as explained above under "Building a specific DUNE module".
</p>
