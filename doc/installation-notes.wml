# -*- html -*-
# $Id$

#use wml::layout::default title="DUNE - Installation Notes"

<h1>Installation Notes</h1>

<h2>Dependencies</h2>

<p>
In order to build DUNE you need at least the following software:
</p>
<ul>
<li>a standard compliant C++ compiler
[tested are g++ (&gt;= 3.4.1) and icc (7.0, 8.0 and 9.0)]</li>
<li>pkg-config</li>
</ul>
<p>
The following software is recommend but optional:
</p>
<ul>
<li>MPI (either OpenMPI, lam, or mpich suffice)</li>
</ul>
<p>
When building the development version of DUNE you will also need
</p>
<ul>
<li>automake (&gt;= 1.5)</li>
<li>autoconf (&gt;= 2.50)</li>
<li>libtool</li>
</ul>
<p>
This will provide you with the core DUNE features.</p>
<p>
Some DUNE modules might support further software. Using this software
is optional. The dune-grid module for example supports different
external grid managers like Albert or UG; these have to be downloaded
separately. For a list of supported contrib software packages and
their installation see the notes on
<a href="$(ROOT)/external_libraries/index.html">Installation External Libraries</a>.
</p>

<h2>Installing the core DUNE modules</h2>

<p>
Suppose you have downloaded all DUNE modules of interest to your
computer and extracted then in one common directory. See the <a
href="$(ROOT)/download.html">download</a> section
for a list of available modules. 
</p>
<p>
To compile the modules DUNE has to check several components of
your system and whether prerequisites within the modules are met. For
the ease of users we have designed a custom build system on top of the
automake tools. Run
</p>
<pre>
  ./dune-common/bin/dunecontrol all
</pre>
<p>
to commence those tests and build all modules you have
downloaded. Don't worry about messages telling you that libraries are
missing: they are only needed for grid-self-checks we need for
developing. 
</p>
<p>
You can customize the build to your specific needs by using an options file
(see below)
</p>
<pre>
  ./dune-common/bin/dunecontrol --opts=/path_to/file.opts
</pre>
<p>
If you did not tell dunecontrol to install with an options file you
need to run
</p>
<pre>
  ./dune-common/bin/dunecontrol make install
</pre>
<p>
to install DUNE (you may need root-permissions for the install
part depending on the prefix set)
</p>
<p>
A more comprehensive introduction to the build system can be found in
the <a href="buildsystem/buildsystem.pdf">Dune Build System Howto</a>.
</p>

<h3>Building a specific DUNE module (and its dependent modules)</h3>

<p>You can instruct dunecontrol to build only a certain dune module,
using the <kbd>--only=module_name&gt;</kbd> switch.
Runnning dunecontrol script
<p>
<pre>
./dune-common/bin/dunecontrol --module=&lt;module_name&gt; all
</pre>
</p>
where &lt;module_name&gt; is the name of that particular module given in the
dune.module file, will build only the module &lt;module_name&gt;.
</p>

<p>If you want to build a module and the modules it depends on, you
must run:</p>
<pre>
./dune-common/bin/dunecontrol --module=module_name all
</pre>
<p> Read <a href="http://dune-project.org/dunemodule.html">Maintaining new Dune modules and applications</a> section for more details.
</p>

<h3>Passing options to the build process</h3>

<p>
Using the dunecontrol script the following atomic commands can be
executed:
</p>
<ul>
<li>
autogen (runs autogen in each module, only needed when downloaded
via svn)
</li>
<li>
configure (runs the configure tests for each module
</li>
<li>
exec (executes a command in each module directory)
</li>
<li>
make (runs make for each module)
</li>
<li>
update (updates the svn version)
</li>
</ul>
<p>
The composite command all simply runs autogen, configure and make for
each module.
</p>
<p>
As it is often not convenient (and for the target all impossible) to
specify the options for each command as parameters after the call, one
can pass the options via file specified by the <kbd>--opts=&lt;file&gt;</kbd>
option. For each atomic command one specify the options via a ine
</p>
<pre>
&lt;COMMAND_UPPERCASE&gt;_FLAGS=&lt;flags&gt; # e.g.: MAKE_FLAGS=install
</pre>
<p>
The available options for make and svn are the natural ones. The
configure commands available can be found by issuing
</p>
<pre>
dunecontrol --only=dune-common configure --help
</pre>
<p>
and for autogen by
</p>
<pre>
dunecontrol --only=dune-common autogen --help
</pre>
<p>
(In the svn version this has to be calles after running autogen.)
</p>
<p>
An example of an options file is 
</p>
<pre>
  \# use a special compiler (g++ version 3.4) and install to a custom
  \# directory, default is /usr/local/bin
  CONFIGURE_FLAGS="CXX=g++-3.4 --prefix='/tmp/HuHu'"
  \# Set the default target of make to install. Now the call above will
  \# not just build the DUNE modules but also install it
  MAKE_FLAGS=install
  \# The default versions of automake and autogen are not sufficient
  \# therefore we need to specify what versions to use
  AUTOGEN_FLAGS="--ac=2.59 --am=1.9"
</pre>

<p>On some platforms special care might have to be taken to make
  things comile, e.g. this is the cause for IBM's Blue Gene System
  P. If you want to run DUNE there please read the <a href="installation-notes-jugene.html">instructions</a> of
  Markus and save yourself a lot of time.
<h2>Creating your own DUNE project module</h2>
<p>
You can create your own dune project module by using the duneproject script available in dune-common/bin directory.
Running the script will create a directory with supporting files
(configure.ac, Makefile.am etc.) and a sample .cc file.
After creating the module you can build this as explained above under "Building a specific DUNE module".
</p>
<p>The <a
href="http://dune-project.org/doc/buildsystem/buildsystem.pdf">DUNE
Build System Howto</a> will also give you an excellent introduction to
the build system and how to create new modules/projects your own.
</p>
