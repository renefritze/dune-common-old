# -*- html -*-
# $Id$

#use wml::layout::default title="DUNE - Coding Style"

<h1>Coding Style</h1>

<p>
In order to keep the code maintainable we have decided upon a set
of coding rules.  Some of them may seem like splitting hairs to you,
but they do make it much easier for everybody to work on code that
hasn't been written by oneself.</p>

<p>
So here they are...
</p>

    <ul>
      <li> <b> Naming: </b>
        <ul>
          <li> <b>Variables:</b>
            Names for variables should only consist of letters and digits.
            The first letter should be a lower case one.  If your variable
            names consists of several words, then the first letter of each
            new word should be capital.
          </li>
          <li> <b>Private Data Variables:</b>
            Names of private data variables end with an underscore.
          </li>
          <li> <b> Typenames: </b>
            For typenames, the same rules as for variables apply.  The only
            difference is that the first letter should be a capital one.</li>
          <li> <b> Macros: </b> 
          The use of preprocessor macros is strongly discouraged.  If you
          have to use them for whatever reason, please use capital letters
          only.</li>
          <li> <b> The Exlusive-Access Macro: </b> 
            Every header file traditionally begins with the definition of
            a preprocessor constant that is used to make sure that each
            header file is only included once.  If your header file is
            called 'myheaderfile.hh', this constant should be
            DUNE_MYHEADERFILE_HH.</li>
          <li> <b> Files: </b> 
          Filenames should consist of lower case letters exclusively.
          Header files get the suffix .hh, implementation files the suffix
          .cc</li>
        </ul>
      </li>
      <li> <b> Indentation: </b> </li>
      <li> <b> Documentation: </b> <br>
          Dune, as any software project of similar complexity, will stand and fall 
          with the quality of its documentation.  Therefore it is of paramount
          importance that you document well everything you do!  We use the
          doxygen system to extract easily-readable documentation form the
          source code.  Please use its syntax everywhere.  In particular,
          please comment all
          <ul>
            <li> Method Parameters </li>
            <li> Template Parameters </li> 
            <li> Return Values </li>
            <li> Exceptions thrown by a method </li>
          </ul>
          Since we all know that writing documentation is not well-liked and
          is frequently defered to some vague 'next week', we herewith
          proclaim the <b> Doc-Me Dogma </b>.  It goes like this:  Whatever
          you do, and in whatever hurry you happen to be, please document
          everything at least with a
          /** \todo Please doc me! */.
          That way at least the absence of documentation is documented,
          and it is easier to get rid of it systematically.
          <!-- The doc-me dogma, should details go to the .cc files? -->
      </li>
      <li> <b> Exceptions: </b> <br>
          The use of exceptions for error handling is encouraged.  Until further
          notice, all exceptions thrown are DuneEx.          
      </li>
      <li> <b> Output: </b> printf, streams, UserWriteF? </li>
      <li> Should we allow 'for' and the command following it in the same line? </li>
      <li> <b> Enum vs. static const: </b> <br>
          The case is as of yet undecided... </li>
      <li> <b> Debugging Code: </b> <br>
          Global debugging code is switched off by setting the symbol NDEBUG.
          In particular, all asserts are automatically removed.  Use those
      asserts freely!
      </li>
      <!-- Enforcement -->
</ul>
