# -*- html -*-
# $Id$

#use wml::layout::default title="DUNE - Writing Tests"

<h1>Writing Tests for Dune</h1>

<p>
Inspired by the pricipales of
<a href="http://www.extremeprogramming.org/rules/testfirst.html">
Extreme Programming</a> every developer is encouraged to write test
cases when ever he encounters a bug, or even better write a test
before adding new functionality to Dune</p>

<h2>Integrating Tests into the Buildsystem</h2>

<p>
The automake Buildsystem offers an easy way to add tests. We decided
to put all tests belonging to one module into a subdirectory
<tt>test</tt> (i.e. all test for <tt>dune/common</tt> belong into
<tt>dune/commom/test</tt>). In this directory one lists the tests
in the Makefile.am. Automake offers two classes of tests, those
that must run (<tt>TESTS</tt>) and does that must not run
(<tt>XFAIL_TESTS</tt>):
</p>
<pre>
...

TESTS = mustrun
XFAIL_TESTS = mustfail

mustrun_SOURCES = mustrun.cc
mustfail_SOURCES = mustfail.cc

...
</pre>

<h2>Writing Compiletime Tests</h2>

<p>
As described by Bjarne Stroustrup himself
(<a href="http://www.research.att.com/~bs/bs_faq2.html#constraints">
C++ Style and Technique FAQ</a>), there are ways to write compiletime
tests in C++ that ensure that a certain part of the code is compiled,
but will never be executed. This kind of checks is heavily used in the
tests of the grid interface in <tt>dune/grid/test/gridcheck.cc</tt>.
</p>
<p>
Currently the buildsystem does not support compiletime test that must
	  fail.
</p>

<h2>Writing Runtime Tests</h2>

<p>
We currently don't use a special test framework for runtime tests.
</p>