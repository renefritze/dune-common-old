# -*- html -*-
# $Id$

#use wml::layout::default title="DUNE - Using config.h helps writing portable code"

<h1>Using config.h helps writing portable code</h1>

<em>Just copied from a mail Thimo send to the dune list:</em>
<pre>
it seems that there is still a bit of confusion about DUNE_DEPRECATED:
this define should be set in the applications config.h where the
compiler features are known. Thus, a program on the application side
should start with

&#35;include "config.h"

&#35;include &lt;dune/stuff/morestuff.hh&gt;

so that workarounds for compiler bugs or other crazy tricks can work.

We introduced DUNE_DEPRECATED so that the compiler can warn if
functions are used which we decided to remove some meeting(s)
ago. Otherwise those functions will be scattered thoughout the
codebase for ages. Unfortunately, the deprecated-mechanism is a
GNU-extension which is why we check for it.

The DUNE_CHECK_ALL-test, which both duneapps and dune-tutorial use,
includes this check. When icc is used DUNE_DEPRECATED will
automatically be defined to nothing. If this does not work, please run
"autogen.sh" again (this will fetch the newer tests from Dune) and
check if config.h really doesn't mention DUNE_DEPRECATED. If so,
please drop me a note.

_Please_ don't fiddle with those automatic variables! This will break
all the portability magic! As we experienced with Dune under Mac OS X
there are a lot of subtle differences between Unices we have to take
care of!
</pre>

<h1>Avoid _A and some other short variables</h1>
<em>Just copied from a mail Christian send to the dune list:</em>
<pre>
We just realised, that on BSD systems _A is defined. This leads to lot
of problems in our code as we use _A as a variable name. Then
precosessor creates funny code like
   const M&amp; 0x00001010;
instead of
   const M&amp; _A;

The same problem implies for several _"one big charakter" names.

So be warned :-)
</pre>

<h1>Portable Shell Programming</h1>
<p>
In the buildsystem quite some shell code is needed. The default
shell <tt>/bin/sh</tt> is supposed to behave the same, no matter which
machine you run your script on. Sadly there are some subtile, but
still important, differences between the different 'bourne shell'
implementations. Therefore it is important to know about possible caveats.
</p>
<ul>
<li>
<a href="http://www.linux.com/articles/34658">
What to watch out for when writing portable shell scripts</a>
(article in linux.com)
</li>
<li>
<a href="http://code.dogmap.org/lintsh/">lintsh</a>: a collection of
known incompatibilities between different <tt>sh</tt> versions.
</li>
<li>
Autoconf Guide - chapter
<a
href="http://www.gnu.org/software/autoconf/manual/autoconf-2.57/html_node/autoconf_114.html">
Portable Shell Programming</a>
</li>
</ul>

<h1>Further information</h1>
<ul>
<li><a href="http://predef.sourceforge.net/">http://predef.sourceforge.net/</a> 
"Pre-defined C/C++ Compiler Macros", tables of all known
system-defines and compiler-defines. Also features links to other
pages about portability</li>
<li><a href="http://www.opengroup.org/onlinepubs/009695399/mindex.html">http://www.opengroup.org/onlinepubs/009695399/mindex.html</a>
current "standard operating system interface and environment"
including information about standard headers and functions</li>
<li>The <a href="http://bhami.com/rosetta.html">Rosetta Stone for
	  Unix</a> with an overview of the different systems</li>
</li>
</ul>
